Read about Thread Executor, thread pool


Java thread pool manages the pool of worker threads.
 It contains a queue that keeps tasks waiting to get executed.
  We can use ThreadPoolExecutor to create thread pool in Java.
   Java thread pool manages the collection of Runnable threads.
    The worker threads execute Runnable threads from the queue.
     java.util.concurrent.Executors provide factory and support methods for java.
     util.concurrent.Executor interface to create the thread pool in java.
 Executors is a utility class that also provides useful methods to work
  with ExecutorService, ScheduledExecutorService, ThreadFactory,
   and Callable classes through various factory methods.
 Let’s write a simple program to explain it’s working. 
 First, we need to have a Runnable class, named WorkerThread.java

package com.journaldev.threadpool;

public class WorkerThread implements Runnable {
  
    private String command;
    
    public WorkerThread(String s){
        this.command=s;
    }

    @Override
    public void run() {
        System.out.println(Thread.currentThread().getName()+" Start. Command = "+command);
        processCommand();
        System.out.println(Thread.currentThread().getName()+" End.");
    }

    private void processCommand() {
        try {
            Thread.sleep(5000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    @Override
    public String toString(){
        return this.command;
    }
}